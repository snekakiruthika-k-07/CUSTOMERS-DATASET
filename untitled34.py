# -*- coding: utf-8 -*-
"""Untitled34.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1re4ylchg96naMtk5fFWorp-w_k6Q10DT
"""

import pandas as pd
import matplotlib.pyplot as plt
df=pd.read_csv("/content/E-commerce Customer Behavior - Sheet1.csv")
df

#to remove empty rows in the dataset
print(df.dropna())

#removing the duplicates
print(df.duplicated())

#display the column names
print(df.columns)

#columns in membership type
unique_values = df['Membership Type'].unique()
unique_values

#plotting for membership type
gold_data = df[df['Membership Type'] == 'Gold']
silver_data = df[df['Membership Type'] == 'Silver']
bronze_data = df[df['Membership Type'] == 'Bronze']
plt.plot(gold_data['Membership Type'], gold_data['Customer ID'], color='Gold', label='Gold')
plt.plot(silver_data['Membership Type'], silver_data['Customer ID'], color='silver', label='Silver')
plt.plot(bronze_data['Membership Type'], bronze_data['Customer ID'], color='brown', label='Bronze')
plt.xlabel("MEMBERSHIP TYPE")
plt.ylabel("CUSTOMER ID")
plt.title("MEMBERSHIP BASED ON THE CUSTOMER ID")
plt.show()

#satisfication level
unique_values = df['Satisfaction Level'].unique()
unique_values

#gender
unique_values = df['Gender'].unique()
unique_values

#age based on the gender
female_data = df[df['Gender'] == 'Female']
male_data = df[df['Gender'] == 'Male']
plt.scatter(female_data['Gender'], female_data['Age'], color='pink', label='FEMALE')
plt.scatter(male_data['Gender'], male_data['Age'], color='blue', label='MALE')
plt.xlabel("GENDER")
plt.ylabel("AGE")
plt.title("GENDER OF THE PEOPLE BASED ON THE AGE")
plt.show()

#satisfaction level based on the age
unsatisfied_data = df[df['Satisfaction Level'] == 'Unsatisfied']
neutral_data = df[df['Satisfaction Level'] == 'Neutral']
satisfied_data = df[df['Satisfaction Level'] == 'Satisfied']
plt.scatter(unsatisfied_data['Satisfaction Level'], unsatisfied_data['Age'], color='red')
plt.scatter(neutral_data['Satisfaction Level'], neutral_data['Age'], color='yellow')
plt.scatter(satisfied_data['Satisfaction Level'], satisfied_data['Age'], color='green')
plt.xlabel("SATISFACTION LEVEL")
plt.ylabel("AGE")
plt.title("SATISFACTION LEVEL BASED ON THE AGE")
plt.show()

#Rating for the product based on the Age
female_data = df[df['Gender'] == 'Female']
male_data = df[df['Gender'] == 'Male']
plt.bar(female_data['Gender'], female_data['Average Rating'], color='pink', label='FEMALE')
plt.bar(male_data['Gender'], male_data['Average Rating'], color='blue', label='MALE')
plt.xlabel("GENDER")
plt.ylabel("AVERAGE RATING")
plt.title("GENDER OF THE PEOPLE BASED ON THE AVERAGE RATING")
plt.show()

df.boxplot(column='Total Spend', by='Discount Applied')
plt.xlabel("DISCOUNT APPLIED")
plt.ylabel("TOTAL SPEND")
plt.title("TOTAL SPEND BY DISCOUNT APPLIED")
plt.show()

#pie chart using the satisfaction level
satisfaction_levels = df['Satisfaction Level'].value_counts()
plt.pie(satisfaction_levels, labels=satisfaction_levels.index, autopct='%1.1f%%', startangle=140)

plt.title('Distribution of Satisfaction Levels')
plt.show()

#pie chart for analysis of the people from the city
city_counts = df['City'].value_counts()
plt.figure(figsize=(8, 8))
plt.pie(city_counts, labels=city_counts.index, autopct='%1.1f%%', startangle=140)
plt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle
plt.title('Distribution of People by City')
plt.show()